//#include "stdafx.h"
#include<iostream>
#include<iomanip>
#include<cmath>
#include<memory>
#include<string>
#include <conio.h>
#include<fstream>
#include<tuple>
using namespace std;
#pragma warning(disable:4996)

enum VrstaAktivnosti { Poligon, Gradska, Nocna, Parkiranje };
enum Kategorija { A, B, C, D, E };
const int maxKategorija = 5;

struct Datum {
	int * _dan, *_mjesec, *_godina;
	void Unos(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	void Ispis() { cout << *_dan << "/" << *_mjesec << "/" << *_godina << endl; }
	void Dealociraj() { /*delete  _dan; delete  _mjesec; delete _godina;*/ }

	bool DaLiSuIsti(Datum d) {
		if (*_godina == *d._godina && *_mjesec == *d._mjesec && *_dan == *d._dan)
			return true;
		return false;
	}
	bool Provjera(Datum d) {
		if ((*_godina * 100 + *_mjesec * 10 + *_dan) - (*d._godina * 100 + *d._mjesec * 10 + *d._dan) < 30)
			return false;
		return true;
	}

	int GetDays() {
		return *_godina * 365 + *_mjesec * 30 + *_dan;
	}
};
struct Aktivnost {
	unique_ptr<VrstaAktivnosti> _vrsta;
	Datum _datumIzvrsenja;
	char * _komentar;
	int _ocjena; // 1 - 5
	void Unos(VrstaAktivnosti vrsta, Datum * datum, int ocjena, const char * komentar) {
		_vrsta = make_unique<VrstaAktivnosti>(vrsta);
		_datumIzvrsenja.Unos(*datum->_dan, *datum->_mjesec, *datum->_godina);
		_ocjena = ocjena;
		int size = strlen(komentar) + 1;
		_komentar = new char[size];
		strcpy_s(_komentar, size, komentar);
	}
	void Ispis() {
		cout << *_vrsta << " " << _ocjena << " " << _komentar;
		_datumIzvrsenja.Ispis();
		cout << endl;
	}
	void Dealociraj() {
		_datumIzvrsenja.Dealociraj();
		delete[] _komentar; _komentar = nullptr;
	}
};
struct VozackaKategorija {
	Datum * _datumPolaganja;//datum koji ce se evidentirati kao datum polaganja kategorije tj. kada su ispunjene sve aktivnosti/obaveze
	Kategorija _kategorija;
	Aktivnost * _listaIzvrsenihAktivnosti;
	int _trenutnoIzvrsenihAktivnosti;
	void Unos(Kategorija kategorija) {
		_listaIzvrsenihAktivnosti = nullptr;
		_trenutnoIzvrsenihAktivnosti = 0;
		_datumPolaganja = nullptr;
		_kategorija = kategorija;
	}
	void Dealociraj() {
		_datumPolaganja->Dealociraj();
		for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
			_listaIzvrsenihAktivnosti[i].Dealociraj();
		delete[] _listaIzvrsenihAktivnosti;
		_listaIzvrsenihAktivnosti = nullptr;
	}
	void Ispis() {
		if (_datumPolaganja != nullptr)
			_datumPolaganja->Ispis();
		cout << _kategorija << endl;
		for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
			_listaIzvrsenihAktivnosti[i].Ispis();
	}

	bool DodajIzvrsenuAktivnost(VrstaAktivnosti vrsta, Datum *d, int ocjena, const char *komentar) {

		for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
		{
			if (*_listaIzvrsenihAktivnosti[i]._vrsta == vrsta && _listaIzvrsenihAktivnosti[i]._datumIzvrsenja.GetDays() == d->GetDays() && _listaIzvrsenihAktivnosti[i]._ocjena > 3)
				return false;
			if (*_listaIzvrsenihAktivnosti[i]._vrsta == vrsta && (d->GetDays() - _listaIzvrsenihAktivnosti[i]._datumIzvrsenja.GetDays())<30)
				return false;

		}

		Aktivnost *temp = new Aktivnost[_trenutnoIzvrsenihAktivnosti + 1];
		for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
		{
			temp[i].Unos(*_listaIzvrsenihAktivnosti[i]._vrsta, &_listaIzvrsenihAktivnosti[i]._datumIzvrsenja, _listaIzvrsenihAktivnosti[i]._ocjena, _listaIzvrsenihAktivnosti[i]._komentar);
			_listaIzvrsenihAktivnosti[i].Dealociraj();
		}
		delete[]_listaIzvrsenihAktivnosti;
		temp[_trenutnoIzvrsenihAktivnosti].Unos(vrsta, d, ocjena, komentar);
		_trenutnoIzvrsenihAktivnosti++;
		/*if (_listaIzvrsenihAktivnosti != nullptr)
		delete[]_listaIzvrsenihAktivnosti;*/
		_listaIzvrsenihAktivnosti = temp;
		return true;

	}
	void Sortiraj() {
		bool prolaz = true;
		while (prolaz == true) {
			prolaz = false;
			for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti - 1; i++)
			{
				if (_listaIzvrsenihAktivnosti[i]._ocjena < _listaIzvrsenihAktivnosti[i + 1]._ocjena) {

					Aktivnost temp;

					temp.Unos(*_listaIzvrsenihAktivnosti[i]._vrsta, &_listaIzvrsenihAktivnosti[i]._datumIzvrsenja, _listaIzvrsenihAktivnosti[i]._ocjena, _listaIzvrsenihAktivnosti[i]._komentar);
					_listaIzvrsenihAktivnosti[i].Dealociraj();

					_listaIzvrsenihAktivnosti[i].Unos(*_listaIzvrsenihAktivnosti[i + 1]._vrsta, &_listaIzvrsenihAktivnosti[i + 1]._datumIzvrsenja, _listaIzvrsenihAktivnosti[i + 1]._ocjena, _listaIzvrsenihAktivnosti[i + 1]._komentar);
					_listaIzvrsenihAktivnosti[i + 1].Dealociraj();

					_listaIzvrsenihAktivnosti[i + 1].Unos(*temp._vrsta, &temp._datumIzvrsenja, temp._ocjena, temp._komentar);
					temp.Dealociraj();

					prolaz = true;
				}
			}
		}
	}

	bool DaLiJePolozena() {

		int  brojac = 0;
		int pozicija;
		bool BoolPoligon = false, BoolGradska = false, BoolNocna = false, BoolParkiranje = false;

		for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
		{
			if (_listaIzvrsenihAktivnosti[i]._ocjena <= 2)
				brojac++;
			if (*_listaIzvrsenihAktivnosti[i]._vrsta == Poligon && _listaIzvrsenihAktivnosti[i]._ocjena > 2) {
				BoolPoligon = true;
				pozicija = i;
			}
			if (*_listaIzvrsenihAktivnosti[i]._vrsta == Gradska && _listaIzvrsenihAktivnosti[i]._ocjena > 2) {
				BoolGradska = true;
				pozicija = i;
			}
			if (*_listaIzvrsenihAktivnosti[i]._vrsta == Nocna && _listaIzvrsenihAktivnosti[i]._ocjena > 2) {
				BoolNocna = true;
				pozicija = i;
			}
			if (*_listaIzvrsenihAktivnosti[i]._vrsta == Parkiranje && _listaIzvrsenihAktivnosti[i]._ocjena > 2) {
				BoolParkiranje = true;
				pozicija = i;
			}
		}

		if (brojac >= 3)
			return false;

		if (BoolPoligon == false || BoolGradska == false || BoolNocna == false || BoolParkiranje == false)
			return false;

		_datumPolaganja = new Datum;
		_datumPolaganja->Unos(*_listaIzvrsenihAktivnosti[pozicija]._datumIzvrsenja._dan, *_listaIzvrsenihAktivnosti[pozicija]._datumIzvrsenja._mjesec, *_listaIzvrsenihAktivnosti[pozicija]._datumIzvrsenja._godina);
		return true;
	}

	float ProsjecnaOcjena() {
		float prosjek = 0;
		for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
		{
			prosjek += _listaIzvrsenihAktivnosti[i]._ocjena;
		}
		
		return float(prosjek / _trenutnoIzvrsenihAktivnosti);
	}
	float PretragaRekrzivno(const char *trazimo, int brojac = 0, float Prosjek = 0, int PrebrojiliSmoIh = 0) {
		if (brojac < 0)
		{
			if (PrebrojiliSmoIh > 0)
				return Prosjek / PrebrojiliSmoIh;
			return Prosjek;
		}
		if (strstr(_listaIzvrsenihAktivnosti[brojac]._komentar, trazimo))
		{
			Prosjek += _listaIzvrsenihAktivnosti[brojac]._ocjena;
			PrebrojiliSmoIh++;
		}
		PretragaRekrzivno(trazimo, brojac - 1, Prosjek, PrebrojiliSmoIh);
	}
};

struct Kandidat {
	char * _imePrezime;
	shared_ptr<VozackaKategorija> _kategorije[maxKategorija];
	int _trenutnoKategorija;
	void Unos(const char * imePrezime) {
		int size = strlen(imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, imePrezime);
		_trenutnoKategorija = 0;
	}
	void Dealociraj() {
		delete[] _imePrezime; _imePrezime = nullptr;
		for (size_t i = 0; i < _trenutnoKategorija; i++) {
			_kategorije[i]->Dealociraj();
			_kategorije[i].reset();
		}
	}
	void Ispis() {
		cout << _imePrezime << endl;
		for (size_t i = 0; i < _trenutnoKategorija; i++)
			_kategorije[i]->Ispis();
	}

	bool DodajKategoriju(VozackaKategorija k) {

		if (_trenutnoKategorija == maxKategorija)
			return false;

		auto dodaj = [this, k]() {
			for (size_t i = 0; i < _trenutnoKategorija; i++)
			{
				if (_kategorije[i] == nullptr) {
					if (i == k._kategorija)
						return true;
					return false;
				}
			}
		};

		if (dodaj() == false)
			return false;

		_kategorije[_trenutnoKategorija] = make_shared<VozackaKategorija>();
		_kategorije[_trenutnoKategorija]->Unos(k._kategorija);
		for (size_t i = 0; i < k._trenutnoIzvrsenihAktivnosti; i++)
		{
			_kategorije[_trenutnoKategorija]->DodajIzvrsenuAktivnost(*k._listaIzvrsenihAktivnosti[i]._vrsta, &k._listaIzvrsenihAktivnosti[i]._datumIzvrsenja, k._listaIzvrsenihAktivnosti[i]._ocjena, k._listaIzvrsenihAktivnosti[i]._komentar);
		}
		_trenutnoKategorija++;
		return true;
	}

	pair<Kategorija, float>GetNajboljuKategoriju() {
		Kategorija Oznaka;
		float NajboljiProsjek = 0;
		for (size_t i = 0; i < _trenutnoKategorija; i++)
		{
			if (_kategorije[i]->ProsjecnaOcjena() > NajboljiProsjek) {
				NajboljiProsjek = _kategorije[i]->ProsjecnaOcjena();
				Oznaka = _kategorije[i]->_kategorija;
			}
		}
		return pair<Kategorija, float>(Oznaka, NajboljiProsjek);
	}
};

void main() {

	//BROJ I VRSTA PARAMETARA MORAJU BITI IDENTICNI KAO U PRIMJERIMA
	//STAVITE KOMENTAR NA DIJELOVE CODE-A KOJE NE BUDETE IMPLEMENTIRALI
	Datum datumPolaganja1, datumPolaganja2, datumPolaganja3, datumPolaganja4;
	datumPolaganja1.Unos(10, 6, 2018);
	datumPolaganja2.Unos(18, 6, 2018);
	datumPolaganja3.Unos(22, 3, 2018);
	datumPolaganja4.Unos(28, 7, 2018);

	VozackaKategorija kategorijaA, kategorijaB, kategorijaC;
	kategorijaA.Unos(A);
	kategorijaB.Unos(B);
	kategorijaC.Unos(C);

	/*Na osnovu vrijednosti primljenog parametra osigurati dodavanje novoizvrsene aktivnosti za potrebe stjecanja odredjene
	vozacke kategorije. Broj aktivnosti nije ogranicen.
	Identicna aktivnost se moze dodati jedino u slucaju kada je prethodna
	(identivna aktivnost po vrsti i datumu izvrsenja) imala ocjenu manju od 3.
	Uspjesnom aktivnoscu se smatraju one aktivnosti koje imaju ocjenu vecu od 2,
	a svaka naredna identicna aktivnost, bez obzira da li je uspjesna ili ne,
	moze biti dodana jedino ako je proslo najmanje 30 dana od izvrsenja prethodne.
	Onemoguciti dodavanje aktivnosti uspjesno polozenoj kategoriji.*/

	if (kategorijaA.DodajIzvrsenuAktivnost(Poligon, &datumPolaganja1, 3, "izuzetno dobra orijentacija"))
		cout << "Aktivnost uspjesno dodana!" << endl;
	if (kategorijaA.DodajIzvrsenuAktivnost(Gradska, &datumPolaganja1, 2, "nesigurnost u raskrsnicama"))
		cout << "Aktivnost uspjesno dodana!" << endl;
	if (kategorijaA.DodajIzvrsenuAktivnost(Gradska, &datumPolaganja2, 4, "raskrsnice savladane"))//datum?
		cout << "Aktivnost uspjesno dodana!" << endl;
	if (kategorijaA.DodajIzvrsenuAktivnost(Gradska, &datumPolaganja4, 4, "raskrsnice savladane"))
		cout << "Aktivnost uspjesno dodana!" << endl;


	//koristeci neki od obradjenih algoritama, po ocjeni sortirati aktivnosti u okviru odredjene kategorije
	kategorijaA.Sortiraj();


	/* Stjecanje kategorije zahtijeva uspjesnu realizaciju svih planiranih aktivnosti,
	a one se za jedan povecavaju sa svakom novom kategorijom, npr.
	A: 1 x poligon, 1 x gradska, 1 x nocna, 1 x parkiranje;
	B: 2 x poligon, 2 x gradska, 2 x nocna, 2 x parkiranje; i td...
	Funkcija vraca false u slucaju da: su kandidatu u listu aktivnosti evidentirane tri negativno ocijenjene
	identicne vrste aktivnosti (npr. tri negativne ocjene iz gradske voznje), onda se ta kategorija ne moze smatrati uspjesno polozenom
	,te ukoliko nedostaje bilo koja od aktivnosti zahtijevanih u okviru te kategorije.
	Ukoliko je kandidat uspjesno realizovao sve aktivnost,
	datum polaganja se postavlja na datum posljednje uspjesno realizovane aktivnosti*/

	if (kategorijaA.DaLiJePolozena())
		kategorijaA.Ispis();

	/*Funkcija vraca prosjecnu ocjenu svih uspjesno realizovanih aktivnosti koja u nazivu ili opisu sadrze vrijednost primljenog
	parametra. Ukoliko smatrate da je potrebno, mozete dodati i druge parametre za potrebe implementacije ove funkcije*/

	cout << "Prosjecna ocjena za kategoriju A -> " << kategorijaA.PretragaRekrzivno("nesigurno") << endl;

	//ispisuje sve dostupne podatke o kategoriji
	kategorijaA.Ispis();

	Kandidat jasmin;
	jasmin.Unos("Jasmin Azemovic");

	/*
	Pretpostavka je da se kategorije moraju polagati po redoslijedu
	tj. ne smije se dozvoliti dodavanje kategorije C ukoliko prethodno nisu uspjesno polozene kategorije B i C.
	Za provjeru ispunjenosti preduslova dodavanja nove kategorije, unutar funkcije DodajKategoriju, kreirati lambda funkciju.
	*/

	if (jasmin.DodajKategoriju(kategorijaA))
		cout << "Kategorija uspjesno dodan!" << endl;
	if (jasmin.DodajKategoriju(kategorijaC))
		cout << "Kategorija uspjesno dodan!" << endl;
	if (jasmin.DodajKategoriju(kategorijaB))
		cout << "Kategorija uspjesno dodan!" << endl;

	float prosjek = 0;
	Kategorija kategorija;
	//Funkcija GetNajboljuKategoriju  vraca par koji sadrzi oznaku i prosjecnu ocjenu 
	//(uspjesno okoncanih aktivnosti) kategorije sa najvecim prosjekom

	tie(kategorija, prosjek) = jasmin.GetNajboljuKategoriju();
	cout << "Najbolji rezultat od " << prosjek << " je ostvaren tokom polaganja kategorije " << kategorija << endl;


	datumPolaganja1.Dealociraj(), datumPolaganja2.Dealociraj(), datumPolaganja3.Dealociraj(), datumPolaganja4.Dealociraj();
	kategorijaA.Dealociraj(), kategorijaB.Dealociraj(), kategorijaC.Dealociraj();
	jasmin.Dealociraj();

	system("pause");
}
