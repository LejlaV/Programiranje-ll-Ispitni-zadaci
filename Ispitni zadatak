#include "stdafx.h"
#include<iostream>
#include<iomanip>
#include<cmath>
#include<memory>
#include<string>
#include <conio.h>
#include<fstream>
using namespace std;
#pragma warning(disable:4996)

const char * crt = "\n----------------------------------------------------\n";
struct Datum {
	int * _dan, *_mjesec, *_godina;
	void Unos(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	void Ispis() { cout << *_dan << "/" << *_mjesec << "/" << *_godina << endl; }
	void Dealociraj() {
		delete _dan; delete _mjesec; delete _godina;
		_dan = _mjesec = _godina = nullptr;
	}
};
struct Izostanak {
	char * _razlogIzostanka;
	Datum _datumIzostanka;
	int _brojSati;
	bool _opravdano;//pravdanje zahtijeva da se evidentira i razlog izostanka	
	void Unos(Datum datumIzostanka, int brojSati) {
		_datumIzostanka.Unos(*datumIzostanka._dan, *datumIzostanka._mjesec, *datumIzostanka._godina);
		_brojSati = brojSati;
		_opravdano = false;
		_razlogIzostanka = new char;
		_razlogIzostanka[0] = '\0';
	}
	void Dealociraj() { delete[] _razlogIzostanka; _razlogIzostanka = nullptr; }
	void Ispis() { _datumIzostanka.Ispis(); cout << _razlogIzostanka << " " << _razlogIzostanka; }
	void Opravdaj(const char * razlogIzostanka) {
		if (_razlogIzostanka != nullptr)
			delete[] _razlogIzostanka;
		int vel = strlen(razlogIzostanka) + 1;
		_razlogIzostanka = new char[vel];
		strcpy_s(_razlogIzostanka, vel, razlogIzostanka);
		_opravdano = true;
	}
};
struct Student {
	//format broja indeksa: IB150051
	//osigurati automatsko generisanje broja indeksa pocevsi od IB150001
	char _brojIndeksa[9];
	char * _imePrezime;
	Izostanak * _izostanci;
	int _brojIzostanaka;
	//Potpisi funkcija trebaju odgovarati onima u main-u
	//1. Unos
	void Unos(const char *BrojIndeksa, const char *imeprezime) {
		strcpy_s(_brojIndeksa, 9, BrojIndeksa);
		_imePrezime = new char[strlen(imeprezime) + 1];
		strcpy_s(_imePrezime, strlen(imeprezime) + 1, imeprezime);
		_brojIzostanaka = 0;
	}
	//2. Dealociraj
	void Dealociraj() {
		delete[] _imePrezime; _imePrezime = nullptr;
		for (size_t i = 0; i < _brojIzostanaka; i++)
		{
			_izostanci[i].Dealociraj();
		}
	}
	/*3. DodajIzostanak - dodaje novi izostanak u listu izostanaka.
	Onemoguciti ponavljanje izostanaka na nacin da se uvecava samo broj sati ukoliko
	korisnik (profesor) vise puta pokusa dodati izostanak na isti dan.*/
	void DodajIzostanak(Izostanak izostanak) {
		for (size_t i = 0; i < _brojIzostanaka; i++)
		{
			if (_izostanci[i]._datumIzostanka._dan == izostanak._datumIzostanka._dan &&
				_izostanci[i]._datumIzostanka._mjesec == izostanak._datumIzostanka._mjesec &&
				_izostanci[i]._datumIzostanka._godina == izostanak._datumIzostanka._godina) {
				_izostanci[i]._brojSati += izostanak._brojSati;
			}
		}
		Izostanak *temp = new Izostanak[_brojIzostanaka + 1];
		for (size_t i = 0; i < _brojIzostanaka; i++)
		{
			temp[i].Unos(_izostanci[i]._datumIzostanka, _izostanci[i]._brojSati);
			temp[i]._opravdano = _izostanci[i]._opravdano;
			if (_izostanci[i]._opravdano) {
				temp[i].Opravdaj(_izostanci[i]._razlogIzostanka);
			}
		}
		for (size_t i = 0; i < _brojIzostanaka; i++)
		{
			_izostanci[i].Dealociraj();
		}
		temp[_brojIzostanaka].Unos(izostanak._datumIzostanka, izostanak._brojSati);
		if (izostanak._opravdano) {
			temp[_brojIzostanaka].Opravdaj(izostanak._razlogIzostanka);
		}
		_izostanci = temp;
		_brojIzostanaka++;
	}
	//4. Ispis - ispisuje izostanke u formatu prikazanom na slici (nije obavezno da ispis bude identican, ali je svakako pozeljno).
	//   Prilikom svakog ispisa, izostanke je potrebno spasiti u tekstualni fajl sa istim nazivom kao i broj indeksa.
	void Ispis() {
		cout << "Broj indexa -> " << _brojIndeksa << endl;
		cout << "Ime i prezime studenta -> " << _imePrezime << endl;
		for (size_t i = 0; i < _brojIzostanaka; i++)
		{
			if (_izostanci[i]._opravdano) {
				cout << "Opravdani izostanci -> " << endl;
				cout << "Broj sati: " << _izostanci[i]._brojSati << endl;
				cout << "Datum izostanka: ";
				_izostanci[i]._datumIzostanka.Ispis();
				cout << "Razlog izostanka: " << _izostanci[i]._razlogIzostanka << endl;
			}
		}
		for (size_t i = 0; i < _brojIzostanaka; i++)
		{
			if (!_izostanci[i]._opravdano) {
				cout << "Neopravdani iznostanci -> " << endl;
				cout << "Broj sati: " << _izostanci[i]._brojSati << endl;
				cout << "Datum izostanka: ";
				_izostanci[i]._datumIzostanka.Ispis();
			}
		}
		}
	//5. BinarnaPretraga - koristeci binarnu pretragu, na osnovu datuma, pronalazi i vraca pokazivac na izostanak. 
	//   Ukoliko trazeni izostanak ne postoji funkcija vraca nullptr.
	bool Provjera(Datum d1, Datum d2) {
		// 0 -> isti
		// 1 -> stariji
		// -1 -> mladji
		if (*d1._godina == *d2._godina && *d1._mjesec == *d2._mjesec && *d1._dan == *d2._dan)
			return 0;
		if (*d1._godina < *d2._godina)
			return -1;
		else if (*d1._godina > *d2._godina)
			return 1;
		else {
			if (*d1._mjesec < *d2._mjesec)
				return -1;
			else if (*d1._mjesec > *d2._mjesec)
				return 1;
			else {
				if (*d1._dan < *d2._dan)
					return -1;
				else if (*d1._dan > *d2._dan)
					return 1;
			}
		}
	}

	Izostanak *BinarnaPretraga(Datum d) {
		for (size_t i = 0; i < _brojIzostanaka-1; i++)
		{
			for (size_t j = i+1; j < _brojIzostanaka; j++)
			{
				if (Provjera(_izostanci[i]._datumIzostanka, _izostanci[j]._datumIzostanka) == -1) {
					Izostanak temp;
					temp.Unos(_izostanci[i]._datumIzostanka, _izostanci[i]._brojSati);
					if (_izostanci[i]._opravdano)
						temp.Opravdaj(_izostanci[i]._razlogIzostanka);
					_izostanci[i].Dealociraj();
					_izostanci[i].Unos(_izostanci[j]._datumIzostanka,_izostanci[j]._brojSati);
					if (_izostanci[j]._opravdano) 
						_izostanci[i].Opravdaj(_izostanci[j]._razlogIzostanka);
						_izostanci[j].Dealociraj();
						_izostanci[j].Unos(temp._datumIzostanka, temp._brojSati);
						if (temp._opravdano)
							_izostanci[j].Opravdaj(temp._razlogIzostanka);
						temp.Dealociraj();
				}
			}
		}
		int prvi = 0, srednji = 0, zadnji = _brojIzostanaka;
		while (prvi <= zadnji) {
			int srednji = (prvi + zadnji) / 2;
			if (Provjera(d, _izostanci[srednji]._datumIzostanka) == 1)
				zadnji = srednji - 1;
			if (Provjera(d, _izostanci[srednji]._datumIzostanka) == -1)
				prvi = srednji + 1;
			if (Provjera(d, _izostanci[srednji]._datumIzostanka) == 0)
				return _izostanci+srednji;
		}
		return nullptr;
	}

};
//1. PronadjiNajveciNeopravdaniIzostanak - rekurzivna funkcija koja vraca pokazivac na neopravdani izostanak koji ima najveci broj 
//2. GenerisiSljedeciBrojIndeksa - generise i vraca naredni broj indeksa
int br = 1;
char * GenerisiSljedeciBrojIndeksa() {
	char *temp = new char[9];
	strcpy_s(temp, strlen(temp) + 1, "IB16000");
	int kopija = br;
	int brojac = 0;
	do {
		kopija /= 10;
		brojac++;
	} while (kopija > 0);
	_itoa_s(br, temp+strlen(temp)-brojac, sizeof(temp), 10);
	br++;
	return temp;
}

void main() {
	Datum jucer, prije5Dana, prije10Dana;
	jucer.Unos(12, 6, 2016);
	prije5Dana.Unos(8, 6, 2016);
	prije10Dana.Unos(3, 6, 2016);

	Student denis;
	denis.Unos(GenerisiSljedeciBrojIndeksa(), "Denis Music");

	Izostanak izostanakJucer, izostanakPrije5Dana, izostanakPrije10Dana;

	izostanakJucer.Unos(jucer, 5);
	denis.DodajIzostanak(izostanakJucer);

	izostanakPrije5Dana.Unos(prije5Dana, 3);
	izostanakPrije5Dana.Opravdaj("Odsutan zbog bolesti - gripa");
	denis.DodajIzostanak(izostanakPrije5Dana);
	izostanakPrije5Dana.Unos(prije5Dana, 2);
	denis.DodajIzostanak(izostanakPrije5Dana);

	izostanakPrije10Dana.Unos(prije10Dana, 1);
	denis.DodajIzostanak(izostanakPrije10Dana);
	izostanakPrije10Dana.Unos(prije10Dana, 1);
	denis.DodajIzostanak(izostanakPrije10Dana);

	denis.Ispis();
	Izostanak * p = denis.BinarnaPretraga(jucer);
	cout << "Binarnom pretragom pronadjen izostanak -> ";
	p->Ispis();
	//denis.Ispis();
	//Izostanak * p2 = PronadjiNajveciNeopravdaniIzostanak(&denis);
	//cout << "Rekurzivno pronadjen najveci neopravdani izostanak -> ";
	//p2->Ispis();
	//cout << endl;
	////dealocirati zauzetu memoriju
	//jucer.Dealociraj();
	//prije5Dana.Dealociraj();
	//prije10Dana.Dealociraj();
	//izostanakJucer.Dealociraj();
	//izostanakPrije5Dana.Dealociraj();
	//izostanakPrije10Dana.Dealociraj();
	//denis.Dealociraj();
}
